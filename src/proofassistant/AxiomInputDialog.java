/*
 * The MIT License
 *
 * Copyright 2014 Declan Thompson.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package proofassistant;

import proofassistant.core.NDLine;
import static proofassistant.Globals.assist;
import static proofassistant.Globals.createExtraLines;
import static proofassistant.Globals.currentGoalIndex;
import static proofassistant.Globals.currentResourceIndex;
import static proofassistant.Globals.extraLines;
import static proofassistant.Globals.frame;
import static proofassistant.Globals.proofArray;

/**
 *
 * @author Declan Thompson
 */
public class AxiomInputDialog extends javax.swing.JDialog {

    /**
     * Creates new form AxiomInputDialog
     */
    public AxiomInputDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(Globals.frame);
    }
    
    public String getMyAxioms() {
        String result = "";
        for (int i = 0; i < Globals.myFunLines.size(); i++) {
            result = result + Globals.myFunLineNums.get(i) + ", " + Globals.myFunLines.get(i) + "\n";
        }
        return result;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        axiomTextArea = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Input your axioms below. Use the format \"[line number],[line]\". Use TeX code format.");

        jLabel2.setText("e.g. \"Q3, \\qa{x}{(x+0)=x}\"");

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        axiomTextArea.setColumns(20);
        axiomTextArea.setRows(5);
        axiomTextArea.setText(getMyAxioms());
        jScrollPane1.setViewportView(axiomTextArea);

        jLabel3.setText("Use a new line for each axiom. Line numbers may not include commas.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(saveButton)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        Globals.myFunLineNums.clear();
        Globals.myFunLines.clear();
        String text = axiomTextArea.getText();
        String specialLineNum;
        String axiom;
        while (text.contains("\n")) {
            specialLineNum = text.substring(0, text.indexOf(","));
            axiom = text.substring(text.indexOf(",") + 1, text.indexOf("\n"));
            Globals.myFunLineNums.add(specialLineNum.trim());
            Globals.myFunLines.add(axiom.trim());
//            System.out.println("added " + axiom.trim());
            text = text.substring(text.indexOf("\n") + 1);
        }
        if (text.contains(",")) {
            specialLineNum = text.substring(0, text.indexOf(","));
            axiom = text.substring(text.indexOf(",") + 1);
            Globals.myFunLineNums.add(specialLineNum.trim());
            Globals.myFunLines.add(axiom.trim());
        }
        
        
        if (assist!=null) {
            proofArray = assist.getProofArray();
            //            System.out.println("Currently " + extraLines.length);
            if (proofArray.length > extraLines.length) {
                NDLine[] temp = new NDLine[proofArray.length - extraLines.length];
                //                System.out.println("temp length " + temp.length);
                for (int i = 0; i < temp.length; i++) {
                    temp[i] = proofArray[i+extraLines.length];
                }
                Globals.proofArray = temp;
                //                System.out.println("pA length " + proofArray.length);
                currentGoalIndex -= extraLines.length;
                currentResourceIndex -= extraLines.length;
            }
            //            System.out.println("pA length " + proofArray.length);
            createExtraLines();
            //            System.out.println("pA length " + proofArray.length);
            //            System.out.println("Now " + extraLines.length);
            NDLine[] temp = new NDLine[proofArray.length + extraLines.length];
            //            System.out.println("temp length " + temp.length);
            int k = 0;
            for (int i = 0; i < extraLines.length; i++) {
                temp[k] = extraLines[i];
                k++;
            }
            for (int i = 0; i < proofArray.length; i++) {
                temp[k] = proofArray[i];
                //                System.out.println(proofArray[i].getLine());
                k++;
            }
            proofArray = temp;

            if (currentGoalIndex > -1) {
                currentGoalIndex += extraLines.length;
            }
            if (currentResourceIndex > -1){
                currentResourceIndex += extraLines.length;
            }
        }

        if (assist != null){
            assist.setProofArray(proofArray);
        }
        frame.updatePanel();
        
        dispose();
    }//GEN-LAST:event_saveButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AxiomInputDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AxiomInputDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AxiomInputDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AxiomInputDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AxiomInputDialog dialog = new AxiomInputDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea axiomTextArea;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables
}
